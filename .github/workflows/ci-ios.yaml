name: Mottu iOS App CI

on:
  workflow_call:
    inputs:
      working-directory:
        description: "The working directory for the Muvr app"
        required: true
        type: string
      env:
        description: "Which env to build the app (e.g.: prod or staging)"
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        description: "SSH private key for accessing the Muvr's repository"
        required: true
      ENV_KEYS:
        description: "The .env file content"
        required: true
      BUILD_CERTIFICATE_BASE64:
        description: "The Apple's app certificate in base64 format - app independent"
        required: true
      BUILD_PROVISION_PROFILE_BASE64:
        description: "The iOS App's provisioning profile in base64 format"
        required: true
      P12_PASSWORD:
        description: "The Apple's app certificate password defined when exported to p12"
        required: true
      PROVISIONING_PROFILE_UUID:
        description: "Provisioning profile UUID"
        required: true
      IOS_CERTIFICATE_CODE_SIGNING:
        description: "The iOS certificate code signing"
        required: true

env:
  FLUTTER_VERSION: "3.22.0"

jobs:
  build-default-ios:
    name: Mottu iOS App
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}
          channel: "stable"

      - name: Install dotenv CLI
        run: npm install -g dotenv-cli --force

      - name: Create .env file
        run: echo "${{ inputs.ENV_KEYS }}" > .env

      - name: Debug Environment Variables
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        run: |
          echo "BUILD_CERTIFICATE_BASE64 length: ${#BUILD_CERTIFICATE_BASE64}"
          echo "BUILD_PROVISION_PROFILE_BASE64 length: ${#BUILD_PROVISION_PROFILE_BASE64}"

      - name: Install Apple Certificate and Provisioning Profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          BUILD_ONE_SIGNAL_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_ONE_SIGNAL_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          PP_ONE_SIGNAL_PATH=$RUNNER_TEMP/build_onesignal_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$BUILD_ONE_SIGNAL_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_ONE_SIGNAL_PATH

          # Verify the files are correctly decoded
          file $CERTIFICATE_PATH
          file $PP_PATH
          file $PP_ONE_SIGNAL_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH || (echo "Import failed"; exit 1)

          # List keychains
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_ONE_SIGNAL_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install FlutterFire CLI
        run: flutter pub global activate flutterfire_cli

      - name: Get dependencies
        run: flutter pub get

      - name: Install CocoaPods dependencies
        run: pod install
        working-directory: ${{ inputs.working-directory }}/ios

      - name: Build iOS version
        run: flutter build ios --release --flavor ${{ inputs.env }} --target=lib/main.dart

      - name: Build xArchive with Certificates
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace -scheme ${{ inputs.env }} -configuration ${{ inputs.env }} DEVELOPMENT_TEAM=M8Y94KLW95 -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/app.xcarchive PROVISIONING_PROFILE="${{ secrets.PROVISIONING_PROFILE_UUID }}" clean archive CODE_SIGN_IDENTITY="${{ secrets.IOS_CERTIFICATE_CODE_SIGNING }}"

  test:
    name: Flutter tests
    timeout-minutes: 5
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}
          channel: "stable"

      - name: Install dotenv CLI
        run: npm install -g dotenv-cli --force

      - name: Create .env file
        run: echo "${{ secrets.ENV_KEYS }}" > .env

      - run: flutter pub get

      - run: dart pub global activate melos

      - run: melos install

      - name: flutter test
        run: melos run fast_test:selective_unit_test
